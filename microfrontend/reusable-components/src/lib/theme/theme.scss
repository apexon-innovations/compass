/* Primary Colors */
$whiteColor: #ffffff;
$whiteOpac10Per: rgba(255, 255, 255, 0.1);

$themeGreenMain: #24ff00;
$themeGreenGeneric: #99d67b;

$themeAmberMain: #ffb245;
$themeAmberGeneric: #f9a64b;
$themeAmberShade01: #ffbc15;

$themeRedMain: #e00e2c;
$themeRedShade01: #f07575;

$themeBlueMain: #00d2ff;
$themeBlueGeneric: #64b8fb;
$themeBlueShade01: #7cb4eb;
$themeBlueShade02: #a4bccf;

$themeYellow: #f8ff73;
$themePurple: #3974ea;
$themePink: #f7a4ef;

/* Graph Background */
$gapSize: 0.7%;
$startValue: 1;
$endValue: 180;

/* Graph Colors */
$graphContainerGrey: #3c4d6d;
$graphContainerGreyOpaque: rgba(60, 77, 109, 0.5);
$graphBg: #02071b;
$graphElements: #01ffff;
$graphElementsOpac3: rgba(1, 255, 255, 0.3);
$graphAverageLine: $themeYellow;

/* General Colors */
$navyBlue: #060e28;
$excelBlue: #1a91eb;

/* Shades of Grey */
$grey97: #979797;
$grey51: #515151;
$greyB1: #b1b1b1;
$grey33: #333333;
$grey11: #111111;

/* -------------------------- */

/* General Colors */
$modalBg: rgba(2, 7, 27, 0.85);
$modalBgLight: rgba(2, 7, 27, 0.35);
$modalBgDark: rgba(2, 7, 27, 0.95);
$acceptanceBoxBg: rgba(0, 0, 0, 0.35);

$qmLabelText: #0074a2;

$themeRedRow: rgba(239, 83, 80, 0.2);
$themeGreenRow: rgba(104, 187, 108, 0.2);
$themeAmberRow: rgba(255, 194, 71, 0.2);
$themeGreyRow: rgba(81, 81, 81, 0.3);
$separator1: rgba(0, 0, 0, 0.1);

/* Compliance color shades */
$c10: #cb5955;
$c20: #ca5a56;
$c30: #cb5b55;
$c40: #d37957;
$c50: #d99558;
$c60: #ddb059;
$c70: #b9ad5f;
$c80: #95aa65;
$c90: #72a76b;

/* Login Page */
$loginTitleColor: #1b1e24;
$loginBorderColor: #e8ecef;
$primaryText: #8e8d8d;

/* Gradients */
$grdGreenLight: rgba(3, 88, 121, 0.8);
$grdGreenDark: #00090c;

/* Client Dashboard */
$orangeShade: #b78950;
$moreButton: #384d70;
$projectBoxBorder: $graphContainerGrey;
$projectBoxStatusGreen: #144028;
$projectBoxTextGreen: #00ffb9;
$projectBoxStatusAmber: #655121;
$projectBoxTextAmber: #ffc22f;
$projectBoxStatusRed: #7a0d1b;
$projectBoxTextRed: #ffabab;
$gradGreenDarkUp: #3cc567;
$gradGreenDarkDown: #02240d;
$gradGreenLightUp: #45f97d;
$gradGreenLightDown: #023412;
$gradAmberUp: #ac8d42;
$gradAmberDown: #201702;
$gradRedLightUp: #e44849;
$gradRedLightDown: #540912;
$gradRedDarkUp: #bc3637;
$gradRedDarkDown: #3f080e;
$collapsableBg: #04091b;
$userIconBg: #66938f;
$tooltipSquadName: #c6dbdf;
$tooltipDate: #aebcd0;
$openDefecttext: #f32f0e;
$defectBorder: #505050;
$defectRed: #952323;
$defectGreen: #2c5d43;
$defectBlue: #1d7097;
$defectPurple: #5c4893;
$acceptedValueIndicator: #082601;
$rejectedValueIndicator: #00273a;
$unattendedValueIndicator: #480101;
$SBSBacklog: #34cb2e;
$SBSCompleted: #3d8d3d;
$SBSToDo: #ded739;
$SBDBacklog: #de5e3f;
$SBDCompleted: #ffb200;
$SBDToDo: #ff7a00;
$treeGraphColorRed: #83474b;
$treeGraphColorYellow: #ae831a;
$treeGraphColorGreen: #0d8b6a;
$treeGraphColorBlue: #483b6e;
$treeGraphColorGray: #313d3e;
$treeGraphColorDarkRed: #d55f5f;
$treeGraphColorDarkBlue: #594596;
$treeGraphColorLightGray: #334f4a;
$treeGraphColorLightGreen: #33806b;
$productHealthBacklog: #34cb2e;
$productHealthCompleted: #3d8d3d;
$productHealthToDo: #ded739;
$productHealthDefectBacklog: #de5e3f;
$productHealthDefectCompleted: #ffb200;
$productHealthDefectToDo: $themeRedMain;
$DefectSummaryRaised: #00c1ff;
$DefectSummaryClosed: #10e80a;
$DefectSummaryOpen: #d3ff00;
$DefectRatio: #e1cc50;
$DefectAverage: #73ff9e;
$defectValue: #c6c6c6;
$deliveryTrendsttTitle: #59d4ee;
$deliveryTrendsttPRAColor: #c8e80a;
$deliveryTrendsttPRBColor: #00d2ff;
$deliveryTrendsttPRCColor: #f16293;
$deliveryTrendsttPRDColor: #6757ff;
$deliveryTrendsttPREColor: #c611ff;
$deliveryTrendsttPRFColor: #d3b2f8;
$statusCritical: #de5e3f;
$statusBlocker: #ffb200;
$statusMajor: #e00e2c;
$statusMinor: #ded739;
$statusUnattended: #ffffff;

/* Client Business Health Dashboard */
$onTrackStatusColor: #10e80a;
$lineOfCode: #a399ff;
$churn: #f16293;
$lagecy: #f4f046;
$technicalDebtCount: #47ff52;
$technicalDebtBorder: #2e3f59;
$technicalDebtComplexity: #ff89a6;
$technicalDebtDuplication: #d9ff89;
$technicalDebtIssues: #945eff;
$technicalDebtMaitenance: #7a9270;
$technicalDebtReliable: #89ccff;
$technicalDebtSecurity: #ff89e0;
$technicalDebtSize: #e17632;
$technicalDebtCoverage: #fbf4f2;

/* Squarebox */
$squareBoxTitle: #ffbb15;
$squareBoxBorder: #126991;

/* Custom Tabs */
$tabBg: #010101;
$activeTab: #093665;

/* Utility theme color shades */
$utilityGraphBg: #111111;
$utilityModernBoxBorder: #333333;
$utilityThemeGrey: #999999;
$utilityThemeLightGrey: #484848;

/* ====================
  Shorthand mixins start
 ==================== */
// Border
// ex: @include border-radius(3px);
@mixin border-radius($radius, $important: null) {
  -webkit-border-radius: $radius $important;
  -moz-border-radius: $radius $important;
  -ms-border-radius: $radius $important;
  border-radius: $radius $important;
}

//----------------------------------------------------------------------
// Offset positioning
// ex: @include position(absolute, auto, 50%, 0, auto);
@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

//----------------------------------------------------------------------
// Center any position
// ex: @include center(true, false);
@mixin center($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    -webkit-transform: translate(-50%, 0);
    -ms-transform: translate(-50%, 0);
    -o-transform: translate(-50%, 0);
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    -webkit-transform: translate(0, -50%);
    -ms-transform: translate(0, -50%);
    -o-transform: translate(0, -50%);
    transform: translate(0, -50%);
  } @else {
    position: absolute;
    top: auto;
    left: auto;
    -webkit-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    -o-transform: translate(0, 0);
    transform: translate(0, 0);
  }
}

//----------------------------------------------------------------------
// Transition any position
// ex: @include transition(all,0.4s,ease-out);
@mixin transition($what: all, $time: 0.2s, $how: ease-in-out, $important: null) {
  -webkit-transition: $what $time $how $important;
  -moz-transition: $what $time $how $important;
  -ms-transition: $what $time $how $important;
  -o-transition: $what $time $how $important;
  //transition: $what $time $how $important;
}

//----------------------------------------------------------------------
// Truncate any text
// ex: @include truncate(100px);
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

//----------------------------------------------------------------------
// Box-shadow any text
// ex: @include box-shadow(0, 12px, 18px, 0 rgba(0, 0, 0, 0.34), false);
@mixin box-shadow(
  $top: null,
  $left: null,
  $blur: null,
  $spread: null,
  $color: null,
  $inset: false
) {
  @if $inset {
    -webkit-box-shadow: inset $top $left $blur $spread $color;
    -moz-box-shadow: inset $top $left $blur $spread $color;
    box-shadow: inset $top $left $blur $spread $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $spread $color;
    -moz-box-shadow: $top $left $blur $spread $color;
    box-shadow: $top $left $blur $spread $color;
  }
}

//----------------------------------------------------------------------
// Reset browser appearance
// ex: @include x-appearance(none);
@mixin x-appearance($value) {
  -webkit-appearance: $value;
  -moz-appearance: $value;
  appearance: $value;
}

//----------------------------------------------------------------------
// Reset browser appearance
// ex: @include css-triangle(top, $yellow, 35px, 70px);
@mixin css-triangle($direction, $color, $height, $width) {
  // Base styles for all triangles
  border-style: solid;
  height: 0;
  width: 0;
  // Cardinal Directions - can't be scalene this way
  @if ($direction == 'top') {
    border-color: transparent transparent $color transparent;
    border-width: 0 ($width/2) $height ($width/2);
  }
  @if ($direction == 'bottom') {
    border-color: $color transparent transparent transparent;
    border-width: $height ($width/2) 0 ($width/2);
  }
  @if ($direction == 'right') {
    border-color: transparent transparent transparent $color;
    border-width: ($height/2) 0 ($height/2) $width;
  }
  @if ($direction == 'left') {
    border-color: transparent $color transparent transparent;
    border-width: ($height/2) $width ($height/2) 0;
  }
  // Ordinal Directions - can be scalene this way!
  @if ($direction == 'top-left') {
    border-color: $color transparent transparent transparent;
    border-width: $height $width 0 0;
  }
  @if ($direction == 'top-right') {
    border-color: transparent $color transparent transparent;
    border-width: 0 $width $height 0;
  }
  @if ($direction == 'bottom-left') {
    border-color: transparent transparent transparent $color;
    border-width: $height 0 0 $width;
  }
  @if ($direction == 'bottom-right') {
    border-color: transparent transparent $color transparent;
    border-width: 0 0 $height $width;
  }
}

//----------------------------------------------------------------------
// Flex browser support
// ex: %flexbox { @include flexbox; } or %inline-flex { @include inline-flex; }
@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}
@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

//----------------------------------------------------------------------
// Flex direction browser support
// ex: @mixin flex-dir($args...) { @include flex-direction($args...); }
@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

//----------------------------------------------------------------------
// Flex wrap browser support
// ex: @mixin flex-wrap($value: nowrap) | Values: nowrap | wrap | wrap-reverse
@mixin flex-wrap($value: nowrap) {
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

//----------------------------------------------------------------------
// Flex flow browser support
// ex: @mixin flex-wrap($value: nowrap) | Values: <flex-direction> | <flex-wrap>
@mixin flex-flow(
  $values: (
    row nowrap,
  )
) {
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

//----------------------------------------------------------------------
// Flex order browser support
// ex: @mixin order($value: nowrap) | Default: 0
@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -moz-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

//----------------------------------------------------------------------
// Flex full browser support
// ex: @mixin flex(1 1 0) | Values: none | <flex-grow> <flex-shrink> || <flex-basis>
@mixin flex($fg: 1, $fs: null, $fb: null) {
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so let's grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

//----------------------------------------------------------------------
// Flex Justify Content browser support
// ex: @mixin flex-just($args...) { @include justify-content($args...); }
@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}

//----------------------------------------------------------------------
// Flex Align Items browser support
// ex: @mixin align-items($args...) { @include align-items($args...); }
@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

//----------------------------------------------------------------------
// Flex Align Self browser support
// ex: @mixin align-self($args...) { @include align-self($args...); }
@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

//----------------------------------------------------------------------
// Flex Align Content browser support
// ex: @mixin align-content($args...) { @include align-content($args...); }
@mixin align-content($value: stretch) {
  // No Webkit Box Fallback.
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

//----------------------------------------------------------------------
// Calc function
// ex: @include calc( width, '100% - 2px');
@mixin calc($property, $expression) {
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: -moz-calc(#{$expression});
  #{$property}: -ms-calc(#{$expression});
  #{$property}: -o-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

//----------------------------------------------------------------------
// transition-delay function
// ex: @include transition-delay(0.5s)
@mixin transition-delay($values) {
  -webkit-transition-delay: $values;
  -moz-transition-delay: $values;
  -ms-transition: $values;
  -o-transition-delay: $values;
  transition-delay: $values;
  transition-property: all;
}

// Gradient Color
// @include gradient(#07c, #06f, vertical);
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == 'vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

/* ====================
  Shorthand mixins end
 ==================== */
